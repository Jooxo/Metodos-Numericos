#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
#include <sstream> // Incluido para manipular strings na formatacao

using namespace std;

// Funcao de Eliminação de Gauss (usada para resolver o Sistema Normal)
vector<double> eliminacaoDeGauss(vector<vector<double>>& Aumentada) {
    int n = Aumentada.size();
    
    // Etapa de Escalonamento (Eliminacao Direta)
    for (int k = 0; k < n; k++) {
        if (abs(Aumentada[k][k]) < 1e-9) {
            cerr << "ERRO NUMERICO: Pivo proximo de zero. O ajuste pode ser instavel." << endl;
            return {};
        }

        for (int i = k + 1; i < n; i++) {
            double fator = Aumentada[i][k] / Aumentada[k][k];
            
            for (int j = k; j < n + 1; j++) {
                Aumentada[i][j] -= fator * Aumentada[k][j];
            }
        }
    }

    // Etapa de Substituicao Regressiva
    vector<double> x(n);
    for (int i = n - 1; i >= 0; i--) {
        double soma = 0.0;
        for (int j = i + 1; j < n; j++) {
            soma += Aumentada[i][j] * x[j];
        }
        x[i] = (Aumentada[i][n] - soma) / Aumentada[i][i];
    }
    return x;
}

const int NUM_COEFICIENTES = 6; // Para: a0, a1x, a2y, a3x^2, a4y^2, a5xy

// Funcao para calcular o termo (Ai^T * Aj) do sistema normal
double calcularTermoATA(int i, int j, const vector<vector<double>>& pontos) {
    double soma = 0.0;
    
    for (const auto& p : pontos) {
        double x = p[0];
        double y = p[1];
        
        vector<double> bases = {1.0, x, y, x * x, y * y, x * y};
        
        soma += bases[i] * bases[j];
    }
    return soma;
}

// Funcao para calcular o termo (Ai^T * b) do sistema normal
double calcularTermoATb(int i, const vector<vector<double>>& pontos) {
    double soma = 0.0;
    
    for (const auto& p : pontos) {
        double x = p[0];
        double y = p[1];
        double z = p[2];

        vector<double> bases = {1.0, x, y, x * x, y * y, x * y};
        
        soma += bases[i] * z;
    }
    return soma;
}


int main() {
    vector<vector<double>> pontos;
    double x_novo, y_novo, z_novo;
    string entrada;

    cout << "### Ajuste de Superficie 3D (Minimos Quadrados - Polinomio de 2o Grau) ###" << endl;
    cout << "Insira os pontos (x y z). Digite 'fim' para calcular o ajuste." << endl;
    cout << "Sao necessarios pelo menos 6 pontos." << endl;

    while (true) {
        cout << "Ponto " << pontos.size() + 1 << " (x y z) ou 'fim': ";
        
        if (!(cin >> x_novo)) {
            cin.clear();
            cin >> entrada;
            if (entrada == "fim") {
                break;
            } else {
                cerr << "Entrada invalida. Tente novamente." << endl;
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                continue;
            }
        }
        
        if (!(cin >> y_novo >> z_novo)) {
             cerr << "Entrada invalida. Faltam coordenadas (y z). Tente novamente." << endl;
             cin.ignore(numeric_limits<streamsize>::max(), '\n');
             continue;
        }

        pontos.push_back({x_novo, y_novo, z_novo});
    }

    if (pontos.size() < NUM_COEFICIENTES) {
        cout << "ERRO: Sao necessarios pelo menos " << NUM_COEFICIENTES << " pontos para um ajuste de 2o grau." << endl;
        return 1;
    }

    vector<vector<double>> sistemaNormal(NUM_COEFICIENTES, vector<double>(NUM_COEFICIENTES + 1));

    for (int i = 0; i < NUM_COEFICIENTES; i++) {
        for (int j = 0; j < NUM_COEFICIENTES; j++) {
            sistemaNormal[i][j] = calcularTermoATA(i, j, pontos);
        }
        sistemaNormal[i][NUM_COEFICIENTES] = calcularTermoATb(i, pontos);
    }

    vector<double> coeficientes = eliminacaoDeGauss(sistemaNormal);

    if (!coeficientes.empty()) {
        cout << "\n========================================================" << endl;
        cout << "RESULTADO DO AJUSTE: POLINOMIO DA SUPERFICIE" << endl;
        cout << "========================================================" << endl;
        
        stringstream ss;
        ss << fixed << setprecision(6);

        // Termo a0
        ss << "z = " << coeficientes[0];

        // Demais termos (a1x, a2y, a3x^2, a4y^2, a5xy)
        vector<string> termos_variaveis = {"x", "y", "x^2", "y^2", "xy"};

        for (int i = 1; i < NUM_COEFICIENTES; i++) {
            double c = coeficientes[i];
            
            // Adiciona o sinal
            if (c >= 0) {
                ss << " + ";
            } else {
                ss << " - ";
                c = abs(c); // Usa o valor absoluto do coeficiente apos adicionar o sinal
            }
            
            // Adiciona o coeficiente e a variavel
            ss << c << termos_variaveis[i - 1];
        }

        cout << ss.str() << endl;
        cout << "========================================================" << endl;
    }

    return 0;
}